services:
  data-loading:
    build:
      context: .
    container_name: data_loading_service
    env_file:
      - .env   
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app/src
    working_dir: /app
    volumes:
      - ./src:/app/src:rw
      - ./data:/app/data:rw
      - ./models:/app/models:rw
    command: >
      python -u -m src.data_loading
      --year 2024
      --data_dir /app/data
      --utils_dir /app/src/utils
    restart: "no"

  model-production:
    build:
      context: .
    container_name: model_production_service
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app/src
    working_dir: /app
    volumes:
      - ./src:/app/src:rw
      - ./data:/app/data:rw
      - ./models:/app/models:rw
    command: >
      python -u -m src.model_production_main
      --year 24
      --data_file /app/data/DATA.csv
    restart: "no"

  # --- Job one-shot : convertit CSV -> SQLite puis s'arrête (exit 0) ---
  csv-to-sqlite:
    image: python:3.12-slim
    container_name: csv_to_sqlite_job
    working_dir: /app
    environment:                      # ✨ MODIF (tout est défini ici)
      CSV_INPUT: "/app/data/DATA.csv"                # chemin CSV d'entrée
      SQLITE_OUTPUT: "/app/data/traces_metabase.db"  # chemin DB SQLite de sortie
      TABLE: "traces"
      IF_EXISTS: "replace"            # fail|replace|append
      INDEX_COLS: "email"
      PK_COL: "email"
      INCLUDE_PREFIXES: "B-CPE-100"  
      KEEP_COLS: "email"      
      # MATCH_CASE: "1"                
    volumes:
      - ./src:/app/src:ro           # contient csv_to_sqlite.py
      - ./data:/app/data:rw         # CSV en entrée + .db en sortie
    entrypoint: ["/bin/sh","-c"]   
    command: |                   
      set -e
      python /app/src/utils/csv_to_sqlite.py \
        "${CSV_INPUT}" \
        "${SQLITE_OUTPUT}" \
        --table "${TABLE}" \
        --if-exists "${IF_EXISTS}" \
        --index "${INDEX_COLS}" \
        --pk "${PK_COL}" \
        --include-prefixes "${INCLUDE_PREFIXES}" \
        --keep-cols "${KEEP_COLS}" \
        ${MATCH_CASE:+--match-case}
    restart: "no"

  # --- Metabase : démarre après que le job ci-dessus ait réussi ---
  metabase:
    image: metabase/metabase:v0.54.8
    container_name: metabase-dev-dp
    ports:
      - "3000:3000"
    environment:
      MB_DB_FILE: /metabase-data/metabase.db   # base interne Metabase (H2)
      TZ: Europe/Paris
    volumes:
      - ./metabase-data:/metabase-data         # persistance Metabase (H2)
      - ./data:/data:rw                        # tes .db SQLite accessibles
    depends_on:
      csv-to-sqlite:
        condition: service_completed_successfully