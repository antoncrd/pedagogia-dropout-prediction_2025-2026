#!/usr/bin/env python3
"""
Microservice pour t√©l√©charger un fichier CSV depuis Google Drive
"""

import os
import argparse
import logging
import requests
import time
from pathlib import Path
from typing import Optional

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class GoogleDriveDownloader:
    """Classe pour t√©l√©charger des fichiers depuis Google Drive"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
    
    def extract_file_id(self, drive_url: str) -> str:
        """Extrait l'ID du fichier depuis une URL Google Drive"""
        if '/file/d/' in drive_url:
            file_id = drive_url.split('/file/d/')[1].split('/')[0]
        elif 'id=' in drive_url:
            file_id = drive_url.split('id=')[1].split('&')[0]
        else:
            raise ValueError(f"Impossible d'extraire l'ID du fichier depuis l'URL: {drive_url}")
        
        logger.info(f"ID du fichier extrait: {file_id}")
        return file_id
    
    def download_file(self, file_id: str, output_path: str, max_retries: int = 3) -> bool:
        """
        T√©l√©charge un fichier depuis Google Drive
        
        Args:
            file_id: ID du fichier Google Drive
            output_path: Chemin de destination pour sauvegarder le fichier
            max_retries: Nombre maximum de tentatives en cas d'√©chec
            
        Returns:
            bool: True si le t√©l√©chargement a r√©ussi, False sinon
        """
        # URL pour le t√©l√©chargement direct
        download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
        
        for attempt in range(max_retries):
            try:
                logger.info(f"Tentative {attempt + 1}/{max_retries} de t√©l√©chargement...")
                
                # Premi√®re requ√™te pour obtenir le token de confirmation si n√©cessaire
                response = self.session.get(download_url, stream=True)
                response.raise_for_status()
                
                # V√©rifier si Google demande une confirmation pour les gros fichiers
                if 'virus scan warning' in response.text.lower() or 'confirm=t' in response.text:
                    # Chercher le token de confirmation
                    confirm_token = None
                    for line in response.text.split('\n'):
                        if 'confirm=t' in line:
                            # Extraire le token depuis le HTML
                            parts = line.split('confirm=t&amp;')
                            if len(parts) > 1:
                                confirm_token = 't'
                                break
                    
                    if confirm_token:
                        download_url = f"https://drive.google.com/uc?export=download&confirm={confirm_token}&id={file_id}"
                        response = self.session.get(download_url, stream=True)
                        response.raise_for_status()
                
                # Cr√©er le r√©pertoire de destination si n√©cessaire
                output_dir = os.path.dirname(output_path)
                if output_dir:
                    os.makedirs(output_dir, exist_ok=True)
                
                # T√©l√©charger le fichier
                total_size = int(response.headers.get('content-length', 0))
                downloaded_size = 0
                
                logger.info(f"T√©l√©chargement vers: {output_path}")
                if total_size > 0:
                    logger.info(f"Taille du fichier: {total_size / (1024*1024):.2f} MB")
                
                with open(output_path, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            downloaded_size += len(chunk)
                            
                            # Afficher le progr√®s pour les gros fichiers
                            if total_size > 0 and downloaded_size % (1024*1024) == 0:
                                progress = (downloaded_size / total_size) * 100
                                logger.info(f"Progr√®s: {progress:.1f}%")
                
                # V√©rifier que le fichier a √©t√© t√©l√©charg√© correctement
                if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
                    final_size = os.path.getsize(output_path)
                    logger.info(f"T√©l√©chargement r√©ussi! Taille finale: {final_size / (1024*1024):.2f} MB")
                    return True
                else:
                    logger.error("Le fichier t√©l√©charg√© est vide ou n'existe pas")
                    if os.path.exists(output_path):
                        os.remove(output_path)
                    
            except requests.exceptions.RequestException as e:
                logger.error(f"Erreur de r√©seau lors de la tentative {attempt + 1}: {e}")
            except Exception as e:
                logger.error(f"Erreur inattendue lors de la tentative {attempt + 1}: {e}")
            
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt  # Backoff exponentiel
                logger.info(f"Attente de {wait_time} secondes avant la prochaine tentative...")
                time.sleep(wait_time)
        
        logger.error(f"√âchec du t√©l√©chargement apr√®s {max_retries} tentatives")
        return False
    
    def download_from_url(self, drive_url: str, output_path: str, max_retries: int = 3) -> bool:
        """
        T√©l√©charge un fichier depuis une URL Google Drive compl√®te
        
        Args:
            drive_url: URL compl√®te du fichier Google Drive
            output_path: Chemin de destination pour sauvegarder le fichier
            max_retries: Nombre maximum de tentatives en cas d'√©chec
            
        Returns:
            bool: True si le t√©l√©chargement a r√©ussi, False sinon
        """
        try:
            file_id = self.extract_file_id(drive_url)
            return self.download_file(file_id, output_path, max_retries)
        except Exception as e:
            logger.error(f"Erreur lors du t√©l√©chargement depuis l'URL {drive_url}: {e}")
            return False


def main():
    """Fonction principale du microservice"""
    parser = argparse.ArgumentParser(description='T√©l√©charger un fichier CSV depuis Google Drive')
    parser.add_argument('--url', required=True, help='URL du fichier Google Drive')
    parser.add_argument('--output', required=True, help='Chemin de sortie pour le fichier CSV')
    parser.add_argument('--retries', type=int, default=3, help='Nombre maximum de tentatives (d√©faut: 3)')
    parser.add_argument('--verify', action='store_true', help='V√©rifier que le fichier est un CSV valide')
    
    args = parser.parse_args()
    
    logger.info("=" * 50)
    logger.info("MICROSERVICE DE T√âL√âCHARGEMENT CSV")
    logger.info("=" * 50)
    logger.info(f"URL source: {args.url}")
    logger.info(f"Destination: {args.output}")
    logger.info(f"Tentatives max: {args.retries}")
    
    # Cr√©er le t√©l√©chargeur
    downloader = GoogleDriveDownloader()
    
    # T√©l√©charger le fichier
    success = downloader.download_from_url(args.url, args.output, args.retries)
    
    if success:
        logger.info("‚úÖ T√©l√©chargement termin√© avec succ√®s!")
        
        # V√©rification optionnelle du format CSV
        if args.verify:
            try:
                import pandas as pd
                df = pd.read_csv(args.output, nrows=5)  # Lire seulement les 5 premi√®res lignes
                logger.info(f"‚úÖ Fichier CSV valide d√©tect√©. Colonnes: {list(df.columns)}")
                logger.info(f"‚úÖ Nombre de colonnes: {len(df.columns)}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  Impossible de v√©rifier le format CSV: {e}")
        
        # Afficher les informations du fichier
        file_size = os.path.getsize(args.output)
        logger.info(f"üìä Taille du fichier: {file_size / (1024*1024):.2f} MB")
        
        exit(0)
    else:
        logger.error("‚ùå √âchec du t√©l√©chargement!")
        exit(1)


if __name__ == "__main__":
    main()